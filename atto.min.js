export class AttoComponent { element } function makeInnerContainer() { let e = document.createElement("div"); return e.style.display = "contents", e } export function el(e, ...t) { let n = document.createElement(e), a = new AttoComponent; return a.element = n, t.forEach(e => { populateElement(n, e) }), a } function populateElement(e, t) { if ("string" == typeof t) e.appendChild(document.createTextNode(t)); else if (t instanceof MutableState) { let n = t, a = makeInnerContainer(); e.appendChild(a); let l = (e, t) => { a.innerHTML = "", populateElement(a, t) }; stateListen(n, l), l(void 0, n.value) } else if (t instanceof AttoComponent) e.appendChild(t.element); else { let o = t; Object.keys(o).forEach(t => { let n = o[t]; n instanceof MutableState || (e[t] = n) }) } } export function renderAttoCompoment(e, t) { let n = t(), a = makeInnerContainer(); a.appendChild(n.element), e.appendChild(a) } export class MutableState { value; callbacks; constructor(e) { this.value = e, this.callbacks = [] } map(e) { return stateMap(this, e) } } export function stateSet(e, t) { let n = e.value; e.value = t, e.callbacks.forEach(e => e(n, t)) } export function stateListen(e, t) { e.callbacks.push(t) } export function stateMap(e, t) { let n = new MutableState(t(e.value, e.value)); return e.callbacks.push((e, a) => stateSet(n, t(e, a))), n } export function stateZip(e, t) { let n = (n, a, l) => { stateSet(n, t(...e.map(e => e.value))) }, a = new MutableState(void 0); return e.forEach(e => stateListen(e, (e, t) => n(a, void 0, void 0))), n(a, void 0, void 0), a } export function state(e) { return new MutableState(e) }